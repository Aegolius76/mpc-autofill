# name: TestGetCardbacks.test_get_multiple_rows
  dict({
    'json': dict({
      'cardbacks': list([
        '1JtXL6Ca9nQkvhwZZRR9ZuKA9_DzsFf1V',
        '1oigI6wz0zA--pNMuExKTs40kBNH6VRP_',
      ]),
    }),
    'status_code': 200,
  })
# ---
# name: TestGetContributions.test_get_multiple_rows
  dict({
    'json': dict({
      'card_count_by_type': dict({
        'CARD': 10,
        'CARDBACK': 2,
        'TOKEN': 1,
      }),
      'sources': list([
        dict({
          'avgdpi': '800.00',
          'description': 'Description for example_drive_1',
          'external_link': 'https://drive.google.com/open?id=1Fu2nEymZhCpOOZkfF0XoZsVqdIWmPdNq',
          'identifier': '1Fu2nEymZhCpOOZkfF0XoZsVqdIWmPdNq',
          'name': 'Example Drive 1',
          'qty_cardbacks': '2',
          'qty_cards': '9',
          'qty_tokens': '1',
          'size': '0.00 GB',
          'source_type': 'Google Drive',
        }),
        dict({
          'avgdpi': '800.00',
          'description': 'Description for example_drive_2',
          'external_link': None,
          'identifier': '18wZl7T9DU_lf2X5xYFiyH6pATVy8ZlOd',
          'name': 'Example Drive 2',
          'qty_cardbacks': '0',
          'qty_cards': '1',
          'qty_tokens': '0',
          'size': '0.00 GB',
          'source_type': 'Google Drive',
        }),
      ]),
      'total_database_size': 1300,
    }),
    'status_code': 200,
  })
# ---
# name: TestGetContributions.test_get_one_row
  dict({
    'json': dict({
      'card_count_by_type': dict({
        'CARD': 2,
        'CARDBACK': 0,
        'TOKEN': 0,
      }),
      'sources': list([
        dict({
          'avgdpi': '800.00',
          'description': 'Description for example_drive_1',
          'external_link': 'https://drive.google.com/open?id=1Fu2nEymZhCpOOZkfF0XoZsVqdIWmPdNq',
          'identifier': '1Fu2nEymZhCpOOZkfF0XoZsVqdIWmPdNq',
          'name': 'Example Drive 1',
          'qty_cardbacks': '0',
          'qty_cards': '2',
          'qty_tokens': '0',
          'size': '0.00 GB',
          'source_type': 'Google Drive',
        }),
      ]),
      'total_database_size': 200,
    }),
    'status_code': 200,
  })
# ---
# name: TestGetContributions.test_get_source_with_no_cards
  dict({
    'json': dict({
      'card_count_by_type': dict({
        'CARD': 0,
        'CARDBACK': 0,
        'TOKEN': 0,
      }),
      'sources': list([
        dict({
          'avgdpi': 0,
          'description': 'Description for example_drive_1',
          'external_link': 'https://drive.google.com/open?id=1Fu2nEymZhCpOOZkfF0XoZsVqdIWmPdNq',
          'identifier': '1Fu2nEymZhCpOOZkfF0XoZsVqdIWmPdNq',
          'name': 'Example Drive 1',
          'qty_cardbacks': '0',
          'qty_cards': '0',
          'qty_tokens': '0',
          'size': '0.00 GB',
          'source_type': 'Google Drive',
        }),
        dict({
          'avgdpi': 0,
          'description': 'Description for example_drive_2',
          'external_link': None,
          'identifier': '18wZl7T9DU_lf2X5xYFiyH6pATVy8ZlOd',
          'name': 'Example Drive 2',
          'qty_cardbacks': '0',
          'qty_cards': '0',
          'qty_tokens': '0',
          'size': '0.00 GB',
          'source_type': 'Google Drive',
        }),
      ]),
      'total_database_size': 0,
    }),
    'status_code': 200,
  })
# ---
# name: TestGetContributions.test_with_no_sources
  dict({
    'json': dict({
      'card_count_by_type': dict({
        'CARD': 0,
        'CARDBACK': 0,
        'TOKEN': 0,
      }),
      'sources': list([
      ]),
      'total_database_size': 0,
    }),
    'status_code': 200,
  })
# ---
# name: TestGetDFCPairs.test_get_multiple_rows
  dict({
    'json': dict({
      'dfc_pairs': dict({
        'Delver of Secrets': 'Insectile Aberration',
        'Huntmaster of the Fells': 'Ravager of the Fells',
      }),
    }),
    'status_code': 200,
  })
# ---
# name: TestGetImportSites.test_get_multiple_sites
  dict({
    'json': dict({
      'import_sites': list([
        dict({
          'name': 'Aetherhub',
          'url': 'https://aetherhub.com',
        }),
        dict({
          'name': 'Archidekt',
          'url': 'https://archidekt.com',
        }),
        dict({
          'name': 'CubeCobra',
          'url': 'https://cubecobra.com',
        }),
        dict({
          'name': 'Deckstats',
          'url': 'https://deckstats.net',
        }),
        dict({
          'name': 'MagicVille',
          'url': 'https://magic-ville.com',
        }),
        dict({
          'name': 'ManaStack',
          'url': 'https://manastack.com',
        }),
        dict({
          'name': 'Moxfield',
          'url': 'https://www.moxfield.com',
        }),
        dict({
          'name': 'MTGGoldfish',
          'url': 'https://www.mtggoldfish.com',
        }),
        dict({
          'name': 'Scryfall',
          'url': 'https://scryfall.com',
        }),
        dict({
          'name': 'TappedOut',
          'url': 'https://tappedout.net',
        }),
        dict({
          'name': 'TCGPlayer',
          'url': 'https://decks.tcgplayer.com/',
        }),
      ]),
    }),
    'status_code': 200,
  })
# ---
# name: TestGetSampleCards.test_get_five_sample_cards
  dict({
    'CARD': dict({
      'Brainstorm': dict({
        'card_type': 'CARD',
        'date': '1st January, 2023',
        'download_link': 'https://drive.google.com/uc?id=1c4M-sK9gd0Xju0NXCPtqeTW_DQTldVU5&export=download',
        'dpi': 800,
        'extension': 'png',
        'identifier': '1c4M-sK9gd0Xju0NXCPtqeTW_DQTldVU5',
        'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=1c4M-sK9gd0Xju0NXCPtqeTW_DQTldVU5',
        'name': 'Brainstorm',
        'priority': 2,
        'searchq': 'brainstorm',
        'size': 100,
        'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=1c4M-sK9gd0Xju0NXCPtqeTW_DQTldVU5',
        'source': 'example_drive_1',
        'source_id': 0,
        'source_name': 'Example Drive 1',
        'source_type': 'Google Drive',
        'source_verbose': 'Example Drive 1 but verbose',
      }),
      'Island': dict({
        'card_type': 'CARD',
        'date': '1st January, 2023',
        'download_link': 'https://drive.google.com/uc?id=1IDtqSjJ4Yo45AnNA4SplOiN7ewibifMa&export=download',
        'dpi': 800,
        'extension': 'png',
        'identifier': '1IDtqSjJ4Yo45AnNA4SplOiN7ewibifMa',
        'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=1IDtqSjJ4Yo45AnNA4SplOiN7ewibifMa',
        'name': 'Island',
        'priority': 7,
        'searchq': 'island',
        'size': 100,
        'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=1IDtqSjJ4Yo45AnNA4SplOiN7ewibifMa',
        'source': 'example_drive_1',
        'source_id': 0,
        'source_name': 'Example Drive 1',
        'source_type': 'Google Drive',
        'source_verbose': 'Example Drive 1 but verbose',
      }),
      'Island (William Bradford)': dict({
        'card_type': 'CARD',
        'date': '1st January, 2023',
        'download_link': 'https://drive.google.com/uc?id=1HsvTYs1jFGe1c8U1PnNZ9aB8jkAW7KU0&export=download',
        'dpi': 800,
        'extension': 'png',
        'identifier': '1HsvTYs1jFGe1c8U1PnNZ9aB8jkAW7KU0',
        'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=1HsvTYs1jFGe1c8U1PnNZ9aB8jkAW7KU0',
        'name': 'Island (William Bradford)',
        'priority': 6,
        'searchq': 'island',
        'size': 100,
        'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=1HsvTYs1jFGe1c8U1PnNZ9aB8jkAW7KU0',
        'source': 'example_drive_1',
        'source_id': 0,
        'source_name': 'Example Drive 1',
        'source_type': 'Google Drive',
        'source_verbose': 'Example Drive 1 but verbose',
      }),
      'Past in Flames': dict({
        'card_type': 'CARD',
        'date': '1st January, 2023',
        'download_link': 'https://drive.google.com/uc?id=1UPdh7J7hScg4ZnxSPJ-EeBYHLp2s3Oz1&export=download',
        'dpi': 800,
        'extension': 'png',
        'identifier': '1UPdh7J7hScg4ZnxSPJ-EeBYHLp2s3Oz1',
        'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=1UPdh7J7hScg4ZnxSPJ-EeBYHLp2s3Oz1',
        'name': 'Past in Flames',
        'priority': 2,
        'searchq': 'past in flames',
        'size': 100,
        'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=1UPdh7J7hScg4ZnxSPJ-EeBYHLp2s3Oz1',
        'source': 'example_drive_1',
        'source_id': 0,
        'source_name': 'Example Drive 1',
        'source_type': 'Google Drive',
        'source_verbose': 'Example Drive 1 but verbose',
      }),
    }),
    'TOKEN': dict({
      'Goblin': dict({
        'card_type': 'TOKEN',
        'date': '1st January, 2023',
        'download_link': 'https://drive.google.com/uc?id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA&export=download',
        'dpi': 800,
        'extension': 'png',
        'identifier': '1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
        'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
        'name': 'Goblin',
        'priority': 2,
        'searchq': 'goblin',
        'size': 100,
        'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
        'source': 'example_drive_1',
        'source_id': 0,
        'source_name': 'Example Drive 1',
        'source_type': 'Google Drive',
        'source_verbose': 'Example Drive 1 but verbose',
      }),
    }),
  })
# ---
# name: TestGetSearchEngineHealth.test_elasticsearch_healthy
  dict({
    'json': dict({
      'online': True,
    }),
    'status_code': 200,
  })
# ---
# name: TestGetSources.test_get_multiple_sources
  dict({
    'json': dict({
      'results': dict({
        '0': dict({
          'description': 'Description for example_drive_1',
          'external_link': 'https://drive.google.com/open?id=1Fu2nEymZhCpOOZkfF0XoZsVqdIWmPdNq',
          'identifier': '1Fu2nEymZhCpOOZkfF0XoZsVqdIWmPdNq',
          'key': 'example_drive_1',
          'name': 'Example Drive 1',
          'pk': 0,
          'source_type': 'Google Drive',
        }),
        '1': dict({
          'description': 'Description for example_drive_2',
          'external_link': None,
          'identifier': '18wZl7T9DU_lf2X5xYFiyH6pATVy8ZlOd',
          'key': 'example_drive_2',
          'name': 'Example Drive 2',
          'pk': 1,
          'source_type': 'Google Drive',
        }),
      }),
    }),
    'status_code': 200,
  })
# ---
# name: TestPostCards.test_get_multiple_cards
  dict({
    'json': dict({
      'results': dict({
        '17fopRCNRge72U8Hac8pApHZtEalx5kHy': dict({
          'card_type': 'CARD',
          'date': '1st January, 2023',
          'download_link': 'https://drive.google.com/uc?id=17fopRCNRge72U8Hac8pApHZtEalx5kHy&export=download',
          'dpi': 800,
          'extension': 'png',
          'identifier': '17fopRCNRge72U8Hac8pApHZtEalx5kHy',
          'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=17fopRCNRge72U8Hac8pApHZtEalx5kHy',
          'name': 'Delver of Secrets',
          'priority': 2,
          'searchq': 'delver of secrets',
          'size': 100,
          'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=17fopRCNRge72U8Hac8pApHZtEalx5kHy',
          'source': 'example_drive_1',
          'source_id': 0,
          'source_name': 'Example Drive 1',
          'source_type': 'Google Drive',
          'source_verbose': 'Example Drive 1 but verbose',
        }),
        '1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA': dict({
          'card_type': 'TOKEN',
          'date': '1st January, 2023',
          'download_link': 'https://drive.google.com/uc?id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA&export=download',
          'dpi': 800,
          'extension': 'png',
          'identifier': '1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'name': 'Goblin',
          'priority': 2,
          'searchq': 'goblin',
          'size': 100,
          'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'source': 'example_drive_1',
          'source_id': 0,
          'source_name': 'Example Drive 1',
          'source_type': 'Google Drive',
          'source_verbose': 'Example Drive 1 but verbose',
        }),
      }),
    }),
    'status_code': 200,
  })
# ---
# name: TestPostCards.test_get_single_card
  dict({
    'json': dict({
      'results': dict({
        '1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA': dict({
          'card_type': 'TOKEN',
          'date': '1st January, 2023',
          'download_link': 'https://drive.google.com/uc?id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA&export=download',
          'dpi': 800,
          'extension': 'png',
          'identifier': '1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'name': 'Goblin',
          'priority': 2,
          'searchq': 'goblin',
          'size': 100,
          'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'source': 'example_drive_1',
          'source_id': 0,
          'source_name': 'Example Drive 1',
          'source_type': 'Google Drive',
          'source_verbose': 'Example Drive 1 but verbose',
        }),
      }),
    }),
    'status_code': 200,
  })
# ---
# name: TestPostCards.test_request_card_not_in_the_database
  dict({
    'json': dict({
      'results': dict({
        '1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA': dict({
          'card_type': 'TOKEN',
          'date': '1st January, 2023',
          'download_link': 'https://drive.google.com/uc?id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA&export=download',
          'dpi': 800,
          'extension': 'png',
          'identifier': '1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'medium_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w800-h800&id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'name': 'Goblin',
          'priority': 2,
          'searchq': 'goblin',
          'size': 100,
          'small_thumbnail_url': 'https://drive.google.com/thumbnail?sz=w400-h400&id=1V5E0avDmNyEUuFfYwx3nA05aj-1HY0rA',
          'source': 'example_drive_1',
          'source_id': 0,
          'source_name': 'Example Drive 1',
          'source_type': 'Google Drive',
          'source_verbose': 'Example Drive 1 but verbose',
        }),
      }),
    }),
    'status_code': 200,
  })
# ---
# name: TestPostCards.test_response_to_malformed_card_identifier_list
  dict({
    'json': dict({
      'results': dict({
      }),
    }),
    'status_code': 200,
  })
# ---
# name: TestPostCards.test_response_to_malformed_json_body
  dict({
    'json': dict({
      'results': dict({
      }),
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_get_request
  dict({
    'content': b'Expected POST request.',
    'status_code': 400,
  })
# ---
# name: TestPostImportSiteDecklist.test_invalid_url
  dict({
    'content': b'The specified decklist URL does not match any known import sites.',
    'status_code': 400,
  })
# ---
# name: TestPostImportSiteDecklist.test_malformed_json_body
  dict({
    'content': b'No decklist URL provided.',
    'status_code': 400,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://aetherhub.com/Deck/test-796905]
  dict({
    'json': dict({
      'cards': '''
        4 Brainstorm
        3 Past in Flames
        1 Delver of Secrets
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://archidekt.com/decks/3380653]
  dict({
    'json': dict({
      'cards': '''
        1 Delver of Secrets // Insectile Aberration
        4 Brainstorm
        3 Past in Flames
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://cubecobra.com/cube/overview/2fj4]
  dict({
    'json': dict({
      'cards': '''
        Delver of Secrets
        Brainstorm
        Brainstorm
        Brainstorm
        Brainstorm
        Past in Flames
        Past in Flames
        Past in Flames
        
        
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://decks.tcgplayer.com/magic/standard/mpc-autofill/test/1398367]
  dict({
    'json': dict({
      'cards': '''
        1 Delver of Secrets
        4 Brainstorm
        3 Past in Flames
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://deckstats.net/decks/216625/2754468-test]
  dict({
    'json': dict({
      'cards': '''
        4 Brainstorm
        1 Delver of Secrets // Insectile Aberration
        3 Past in Flames
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://magic-ville.com/fr/decks/showdeck?ref=948045]
  dict({
    'json': dict({
      'cards': '''
        3 Past in Flames
        4 Brainstorm
        1 Delver of Secrets
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://manastack.com/deck/test-426]
  dict({
    'json': dict({
      'cards': '''
        4 Brainstorm
        3 Past in Flames
        1 Delver of Secrets
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://scryfall.com/@mpcautofill/decks/71bb2d40-c922-4a01-a63e-7ba2dde29a5c]
  dict({
    'json': dict({
      'cards': '''
        4 Brainstorm
        1 Delver of Secrets
        3 Past in Flames
        
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://tappedout.net/mtg-decks/09-10-22-DoY-test]
  dict({
    'json': dict({
      'cards': '''
        4 Brainstorm
        1 Delver of Secrets
        3 Past in Flames
        
        
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://www.moxfield.com/decks/D42-or9pCk-uMi4XzRDziQ]
  dict({
    'json': dict({
      'cards': '''
        1 Delver of Secrets // Insectile Aberration
        4 Brainstorm
        3 Past in Flames
  
      ''',
    }),
    'status_code': 200,
  })
# ---
# name: TestPostImportSiteDecklist.test_valid_url[https://www.mtggoldfish.com/deck/5149750]
  dict({
    'json': dict({
      'cards': '''
        4 Brainstorm
        1 Delver of Secrets
        3 Past in Flames
        
  
      ''',
    }),
    'status_code': 200,
  })
# ---
